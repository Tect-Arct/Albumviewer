pipeline {
    agent any

    environment {
        ACR_NAME    = "nprodregistry.azurecr.io"   // ACR login server
        IMAGE_NAME  = "albumviewer"
        IMAGE_TAG   = "latest"
        VERSION_TAG = "build-${BUILD_NUMBER}"

        // AKS details
        AKS_RG      = "ECK"                     // Resource Group of AKS
        AKS_NAME    = "NonProd-Aks-Cluster"     // AKS cluster name
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/Tect-Arct/Albumviewer.git'
            }
        }

        stage('Restore .NET Dependencies') {
            steps {
                sh 'dotnet restore AlbumViewerNetCore.sln'
            }
        }

        stage('Build .NET App') {
            steps {
                sh 'dotnet build AlbumViewerNetCore.sln --configuration Release'
            }
        }

        stage('Publish .NET App') {
            steps {
                sh 'dotnet publish AlbumViewerNetCore.sln -c Release -o out'
            }
        }

        stage('Prepare Release Folder') {
            steps {
                sh '''
                    echo "Cleaning Release folder..."
                    rm -rf ${WORKSPACE}/Release
                    mkdir -p ${WORKSPACE}/Release

                    echo "Copying all repo files for Docker build (excluding Release folder)..."
                    rsync -av --exclude='Release' ${WORKSPACE}/ ${WORKSPACE}/Release/

                    echo "Listing Release folder contents..."
                    cd ${WORKSPACE}/Release
                    ls -al
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    cd ${WORKSPACE}/Release
                    docker build -t $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG \
                                 -t $ACR_NAME/$IMAGE_NAME:$VERSION_TAG \
                                 -f src/AlbumViewerNetCore/Dockerfile .
                '''
            }
        }

        stage('ACR Login') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'ACR_USER',
                    passwordVariable: 'ACR_PASS'
                )]) {
                    sh '''
                        echo $ACR_PASS | docker login $ACR_NAME -u $ACR_USER --password-stdin
                        docker image ls | grep $IMAGE_NAME || echo "Image built but not pushed yet."
                    '''
                }
            }
        }

        stage('Push to ACR') {
            steps {
                sh '''
                    docker push $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG
                    docker push $ACR_NAME/$IMAGE_NAME:$VERSION_TAG
                '''
            }
        }

        stage('Deploy to AKS') {
            steps {
                withCredentials([azureServicePrincipal(
                    credentialsId: 'azure-aks-sc',
                    subscriptionIdVariable: 'AZ_SUBSCRIPTION_ID',
                    clientIdVariable: 'AZ_CLIENT_ID',
                    clientSecretVariable: 'AZ_CLIENT_SECRET',
                    tenantIdVariable: 'AZ_TENANT_ID'
                )]) {
                    sh '''
                        echo "Logging in to Azure..."
                        az login --service-principal -u $AZ_CLIENT_ID -p $AZ_CLIENT_SECRET --tenant $AZ_TENANT_ID
                        az account set --subscription $AZ_SUBSCRIPTION_ID

                        echo "Getting AKS credentials..."
                        az aks get-credentials --resource-group $AKS_RG --name $AKS_NAME --overwrite-existing
                        
                        echo "Current directory: $(pwd)"
                        ls -al manifests/

                        echo "Updating manifests with built image..."
                        sed -i "s|__IMAGE__|$ACR_NAME/$IMAGE_NAME:$VERSION_TAG|g" ${WORKSPACE}/manifests/deployment.yml

                        echo "Deploying manifests to AKS..."
                        kubectl apply -f ${WORKSPACE}/manifests/deployment.yml -n album-viewer
                        kubectl apply -f ${WORKSPACE}/manifests/service.yml -n album-viewer
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "✅ Successfully built, pushed to ACR, and deployed to AKS"
        }
        failure {
            echo "❌ Pipeline failed. Check the logs above."
        }
    }
}
